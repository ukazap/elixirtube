video:
  title: "Pattern Matching; Good In the Abstract."
  raw_title: "ElixirConf 2021 - Adam Lancaster - Pattern Matching; Good In the Abstract."
  description: "Pattern matching is ubiquitous in Elixir and it is fantastic. It brings explicit clarity to directing control flow and assigning values, but it comes at a cost. Pattern matching exposes a data typeâ€™s internals.\n\nThat means we risk relying on details that could change and if they do we risk invalidating all of our patterns and causing a lot of work.\n\nSo we are left with a choice - should we have abstract data types which hide their internals but be left with no (or limited) pattern matching. Or pattern match on internals and live with the consequences?\n\nIn this talk I want to explore this tension and ask is pattern matching bad?\n\n(Spoiler, no!)\n\nI will explore a list of possible resolutions to this tension (some of which are older than me), and see if we can describe some Rules for the Match.\n\nIn short, I want to ask, can pattern matching play well with abstract data - can it be good in the abstract?"
  speakers:
    - Adam Lancaster
  source: youtube
  source_id: O4v1nGBmPkQ
  thumbnails:
    xs: https://i.ytimg.com/vi/O4v1nGBmPkQ/default.jpg
    s: https://i.ytimg.com/vi/O4v1nGBmPkQ/mqdefault.jpg
    m: https://i.ytimg.com/vi/O4v1nGBmPkQ/hqdefault.jpg
    l: https://i.ytimg.com/vi/O4v1nGBmPkQ/sddefault.jpg
    xl: https://i.ytimg.com/vi/O4v1nGBmPkQ/maxresdefault.jpg
  published_at: 2021-10-26T14:37:50Z